//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {bar_fooapp_1 = 2,bar_kuuapp_2 = 3,bar_kuuapp_3 = 4,bar_kuuapp_4 = 5,bar_zeeapp_0 = 6};using enabled_calls = util::sequence::enum_t<call,call::bar_fooapp_1,call::bar_kuuapp_2,call::bar_kuuapp_3,call::bar_kuuapp_4,call::bar_zeeapp_0>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::bar_fooapp_1>{static constexpr const char * name = "bar_fooapp_1";}
;template <> struct value<app::call::bar_kuuapp_2>{static constexpr const char * name = "bar_kuuapp_2";}
;template <> struct value<app::call::bar_kuuapp_3>{static constexpr const char * name = "bar_kuuapp_3";}
;template <> struct value<app::call::bar_kuuapp_4>{static constexpr const char * name = "bar_kuuapp_4";}
;template <> struct value<app::call::bar_zeeapp_0>{static constexpr const char * name = "bar_zeeapp_0";}
;}export
namespace app{enum class id : enum_uint_t {barapp = 2,fooapp = 3,kuuapp = 4,zeeapp = 5};using enabled_ids = util::sequence::enum_t<id,id::barapp,id::fooapp,id::kuuapp,id::zeeapp>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::barapp>{static constexpr const char * name = "barapp";}
;template <> struct value<app::id::fooapp>{static constexpr const char * name = "fooapp";}
;template <> struct value<app::id::kuuapp>{static constexpr const char * name = "kuuapp";}
;template <> struct value<app::id::zeeapp>{static constexpr const char * name = "zeeapp";}
;}export
namespace app{enum class impl : enum_uint_t {bar = 2,foo = 3,kuu = 4,zee = 5};using enabled_impls = util::sequence::enum_t<impl,impl::bar,impl::foo,impl::kuu,impl::zee>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::bar>{static constexpr const char * name = "bar";}
;template <> struct value<app::impl::foo>{static constexpr const char * name = "foo";}
;template <> struct value<app::impl::kuu>{static constexpr const char * name = "kuu";}
;template <> struct value<app::impl::zee>{static constexpr const char * name = "zee";}
;}