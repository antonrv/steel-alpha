//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Graph;
export import App.Enum;
import SteelRT.Util.Sequence;
import SteelRT.Util.Types;
import SteelRT.Util.Tuple;
import SteelRT.Util.FwDeclarations.App;
import SteelRT.Dep.Guard.Backend;
import SteelRT.Data.View;
export
namespace app{
template <> struct traits<id::barapp>{using impl_sequence = util::sequence::enum_t<impl,impl::bar>;};template <> struct traits<id::fooapp>{using impl_sequence = util::sequence::enum_t<impl,impl::foo>;};template <> struct traits<id::kuuapp>{using impl_sequence = util::sequence::enum_t<impl,impl::kuu>;};template <> struct traits<id::zeeapp>{using impl_sequence = util::sequence::enum_t<impl,impl::zee>;};template <> struct traits<impl::zee> {static constexpr impl this_impl = impl::zee;
static constexpr id belonging_id = id::zeeapp;
using arg_tuple_type = util::tuple_t<std::add_lvalue_reference_t<int>,float,std::add_const_t<char>>;
using call_sequence = util::sequence::enum_t<call,call::bar_zeeapp_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::foo> {static constexpr impl this_impl = impl::foo;
static constexpr id belonging_id = id::fooapp;
using arg_tuple_type = util::tuple_t<std::add_lvalue_reference_t<int>>;
using call_sequence = util::sequence::enum_t<call,call::bar_fooapp_1>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::kuu> {static constexpr impl this_impl = impl::kuu;
static constexpr id belonging_id = id::kuuapp;
using arg_tuple_type = util::tuple_t<std::add_lvalue_reference_t<std::add_const_t<int>>>;
using call_sequence = util::sequence::enum_t<call,call::bar_kuuapp_2,call::bar_kuuapp_3,call::bar_kuuapp_4>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::bar> {static constexpr impl this_impl = impl::bar;
static constexpr id belonging_id = id::barapp;
using arg_tuple_type = util::tuple_t<int,float,std::add_const_t<char>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::bar_zeeapp_0,call::bar_fooapp_1,call::bar_kuuapp_2,call::bar_kuuapp_3,call::bar_kuuapp_4>;
};template <> struct traits<call::bar_zeeapp_0> {static constexpr call this_call = call::bar_zeeapp_0;
static constexpr impl belonging_impl = impl::zee;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<int>,float,const char>;
};template <> struct traits<call::bar_fooapp_1> {static constexpr call this_call = call::bar_fooapp_1;
static constexpr impl belonging_impl = impl::foo;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<int>>;
};template <> struct traits<call::bar_kuuapp_2> {static constexpr call this_call = call::bar_kuuapp_2;
static constexpr impl belonging_impl = impl::kuu;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<const int>>;
};template <> struct traits<call::bar_kuuapp_3> {static constexpr call this_call = call::bar_kuuapp_3;
static constexpr impl belonging_impl = impl::kuu;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<const int>>;
};template <> struct traits<call::bar_kuuapp_4> {static constexpr call this_call = call::bar_kuuapp_4;
static constexpr impl belonging_impl = impl::kuu;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<const int>>;
};}