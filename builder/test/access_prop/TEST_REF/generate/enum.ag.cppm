//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {caller_no_offset_callee_no_offset_app_0 = 2,caller_offset_callee_offset_app_0 = 3};using enabled_calls = util::sequence::enum_t<call,call::caller_no_offset_callee_no_offset_app_0,call::caller_offset_callee_offset_app_0>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::caller_no_offset_callee_no_offset_app_0>{static constexpr const char * name = "caller_no_offset_callee_no_offset_app_0";}
;template <> struct value<app::call::caller_offset_callee_offset_app_0>{static constexpr const char * name = "caller_offset_callee_offset_app_0";}
;}export
namespace app{enum class id : enum_uint_t {callee_no_offset_app = 2,callee_offset_app = 3,caller_no_offset = 4,caller_offset = 5};using enabled_ids = util::sequence::enum_t<id,id::callee_no_offset_app,id::callee_offset_app,id::caller_no_offset,id::caller_offset>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::callee_no_offset_app>{static constexpr const char * name = "callee_no_offset_app";}
;template <> struct value<app::id::callee_offset_app>{static constexpr const char * name = "callee_offset_app";}
;template <> struct value<app::id::caller_no_offset>{static constexpr const char * name = "caller_no_offset";}
;template <> struct value<app::id::caller_offset>{static constexpr const char * name = "caller_offset";}
;}export
namespace app{enum class impl : enum_uint_t {callee_no_offset = 2,callee_offset = 3,caller_no_offset = 4,caller_offset = 5};using enabled_impls = util::sequence::enum_t<impl,impl::callee_no_offset,impl::callee_offset,impl::caller_no_offset,impl::caller_offset>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::callee_no_offset>{static constexpr const char * name = "callee_no_offset";}
;template <> struct value<app::impl::callee_offset>{static constexpr const char * name = "callee_offset";}
;template <> struct value<app::impl::caller_no_offset>{static constexpr const char * name = "caller_no_offset";}
;template <> struct value<app::impl::caller_offset>{static constexpr const char * name = "caller_offset";}
;}