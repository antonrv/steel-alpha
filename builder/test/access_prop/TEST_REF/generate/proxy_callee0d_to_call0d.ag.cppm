//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Proxy;
export import App.Graph;
export import SteelRT.Util.Types;
export import SteelRT.Util.Sequence;
export import SteelRT.Util.FwDeclarations.App;
export import SteelRT.Util.Predicates.App;
export import SteelRT.Task.Descriptor;
export import SteelRT.Task.Dispatcher;
export import SteelRT.Work.Descriptor.Global;
export import SteelRT.Dep.MakeAsync;
export import SteelRT.Dep.Guard.Backend;
export import SteelRT.Dep.Guard.Frontend;
export import SteelRT.Dep.Wrap;
export import <type_traits>;
export import <stdexcept>;
void callee_offset(std::add_pointer_t<float>,int);
task::coro::dispatcher<app::impl::caller_offset> caller_offset(task::attr::descriptor& ,std::add_pointer_t<float>);
void callee_no_offset(std::add_pointer_t<float>);
task::coro::dispatcher<app::impl::caller_no_offset> caller_no_offset(task::attr::descriptor& ,std::add_pointer_t<float>);
export
namespace app{
template <>
class kernel_proxy<impl::callee_offset> {
  static constexpr impl this_impl = impl::callee_offset;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    callee_offset( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_offset> {
public:
  static constexpr impl this_impl = impl::caller_offset;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_offset( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::callee_no_offset> {
  static constexpr impl this_impl = impl::callee_no_offset;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    callee_no_offset( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_no_offset> {
public:
  static constexpr impl this_impl = impl::caller_no_offset;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_no_offset( std::forward<DispatcherArgs>(args) ... ) );
  }
};
}