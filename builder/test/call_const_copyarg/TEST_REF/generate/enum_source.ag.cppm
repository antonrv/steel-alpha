//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {main_entry_fooapp_0 = 2};using enabled_calls = util::sequence::enum_t<call,call::main_entry_fooapp_0>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::main_entry_fooapp_0>{static constexpr const char * name = "main_entry_fooapp_0";}
;}export
namespace app{enum class id : enum_uint_t {fooapp = 2,main_entry = global::EntryAppIndex};using enabled_ids = util::sequence::enum_t<id,id::fooapp,id::main_entry>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::fooapp>{static constexpr const char * name = "fooapp";}
;template <> struct value<app::id::main_entry>{static constexpr const char * name = "main_entry";}
;}export
namespace app{enum class impl : enum_uint_t {foo = 2,main_entry = global::EntryAppImpl};using enabled_impls = util::sequence::enum_t<impl,impl::foo,impl::main_entry>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::foo>{static constexpr const char * name = "foo";}
;template <> struct value<app::impl::main_entry>{static constexpr const char * name = "main_entry";}
;}