//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {caller_different_callee_fooapp_callee_x_0 = 2,caller_different_callee_fooapp_callee_y_1 = 3,caller_same_callee_fooapp_callee_x_0 = 4,caller_same_callee_fooapp_callee_x_1 = 5,caller_same_callee_fooapp_callee_x_2 = 6,caller_same_n_different_callee_fooapp_callee_x_0 = 7,caller_same_n_different_callee_fooapp_callee_y_1 = 8,caller_same_n_different_callee_fooapp_callee_y_2 = 9};using enabled_calls = util::sequence::enum_t<call,call::caller_different_callee_fooapp_callee_x_0,call::caller_different_callee_fooapp_callee_y_1,call::caller_same_callee_fooapp_callee_x_0,call::caller_same_callee_fooapp_callee_x_1,call::caller_same_callee_fooapp_callee_x_2,call::caller_same_n_different_callee_fooapp_callee_x_0,call::caller_same_n_different_callee_fooapp_callee_y_1,call::caller_same_n_different_callee_fooapp_callee_y_2>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::caller_different_callee_fooapp_callee_x_0>{static constexpr const char * name = "caller_different_callee_fooapp_callee_x_0";}
;template <> struct value<app::call::caller_different_callee_fooapp_callee_y_1>{static constexpr const char * name = "caller_different_callee_fooapp_callee_y_1";}
;template <> struct value<app::call::caller_same_callee_fooapp_callee_x_0>{static constexpr const char * name = "caller_same_callee_fooapp_callee_x_0";}
;template <> struct value<app::call::caller_same_callee_fooapp_callee_x_1>{static constexpr const char * name = "caller_same_callee_fooapp_callee_x_1";}
;template <> struct value<app::call::caller_same_callee_fooapp_callee_x_2>{static constexpr const char * name = "caller_same_callee_fooapp_callee_x_2";}
;template <> struct value<app::call::caller_same_n_different_callee_fooapp_callee_x_0>{static constexpr const char * name = "caller_same_n_different_callee_fooapp_callee_x_0";}
;template <> struct value<app::call::caller_same_n_different_callee_fooapp_callee_y_1>{static constexpr const char * name = "caller_same_n_different_callee_fooapp_callee_y_1";}
;template <> struct value<app::call::caller_same_n_different_callee_fooapp_callee_y_2>{static constexpr const char * name = "caller_same_n_different_callee_fooapp_callee_y_2";}
;}export
namespace app{enum class id : enum_uint_t {caller_different_callee = 2,caller_same_callee = 3,caller_same_n_different_callee = 4,fooapp_callee_x = 5,fooapp_callee_y = 6};using enabled_ids = util::sequence::enum_t<id,id::caller_different_callee,id::caller_same_callee,id::caller_same_n_different_callee,id::fooapp_callee_x,id::fooapp_callee_y>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::caller_different_callee>{static constexpr const char * name = "caller_different_callee";}
;template <> struct value<app::id::caller_same_callee>{static constexpr const char * name = "caller_same_callee";}
;template <> struct value<app::id::caller_same_n_different_callee>{static constexpr const char * name = "caller_same_n_different_callee";}
;template <> struct value<app::id::fooapp_callee_x>{static constexpr const char * name = "fooapp_callee_x";}
;template <> struct value<app::id::fooapp_callee_y>{static constexpr const char * name = "fooapp_callee_y";}
;}export
namespace app{enum class impl : enum_uint_t {caller_different_callee = 2,caller_same_callee = 3,caller_same_n_different_callee = 4,foo_callee_x = 5,foo_callee_y = 6};using enabled_impls = util::sequence::enum_t<impl,impl::caller_different_callee,impl::caller_same_callee,impl::caller_same_n_different_callee,impl::foo_callee_x,impl::foo_callee_y>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::caller_different_callee>{static constexpr const char * name = "caller_different_callee";}
;template <> struct value<app::impl::caller_same_callee>{static constexpr const char * name = "caller_same_callee";}
;template <> struct value<app::impl::caller_same_n_different_callee>{static constexpr const char * name = "caller_same_n_different_callee";}
;template <> struct value<app::impl::foo_callee_x>{static constexpr const char * name = "foo_callee_x";}
;template <> struct value<app::impl::foo_callee_y>{static constexpr const char * name = "foo_callee_y";}
;}