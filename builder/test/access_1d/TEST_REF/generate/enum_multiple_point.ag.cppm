//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {caller_res_ro_multiple_point_foo_ro_multiple_point_app_0 = 2,caller_res_ro_multiple_point_foo_ro_multiple_point_app_1 = 3,caller_res_ro_multiple_point_foo_ro_multiple_point_app_2 = 4,caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0 = 5,caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1 = 6,caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2 = 7};using enabled_calls = util::sequence::enum_t<call,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_0,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_1,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_2,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_0>{static constexpr const char * name = "caller_res_ro_multiple_point_foo_ro_multiple_point_app_0";}
;template <> struct value<app::call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_1>{static constexpr const char * name = "caller_res_ro_multiple_point_foo_ro_multiple_point_app_1";}
;template <> struct value<app::call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_2>{static constexpr const char * name = "caller_res_ro_multiple_point_foo_ro_multiple_point_app_2";}
;template <> struct value<app::call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0>{static constexpr const char * name = "caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0";}
;template <> struct value<app::call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1>{static constexpr const char * name = "caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1";}
;template <> struct value<app::call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2>{static constexpr const char * name = "caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2";}
;}export
namespace app{enum class id : enum_uint_t {caller_res_ro_multiple_point = 2,caller_unres_ro_multiple_point = 3,foo_ro_multiple_point_app = 4};using enabled_ids = util::sequence::enum_t<id,id::caller_res_ro_multiple_point,id::caller_unres_ro_multiple_point,id::foo_ro_multiple_point_app>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::caller_res_ro_multiple_point>{static constexpr const char * name = "caller_res_ro_multiple_point";}
;template <> struct value<app::id::caller_unres_ro_multiple_point>{static constexpr const char * name = "caller_unres_ro_multiple_point";}
;template <> struct value<app::id::foo_ro_multiple_point_app>{static constexpr const char * name = "foo_ro_multiple_point_app";}
;}export
namespace app{enum class impl : enum_uint_t {caller_res_ro_multiple_point = 2,caller_unres_ro_multiple_point = 3,foo_ro_multiple_point = 4};using enabled_impls = util::sequence::enum_t<impl,impl::caller_res_ro_multiple_point,impl::caller_unres_ro_multiple_point,impl::foo_ro_multiple_point>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::caller_res_ro_multiple_point>{static constexpr const char * name = "caller_res_ro_multiple_point";}
;template <> struct value<app::impl::caller_unres_ro_multiple_point>{static constexpr const char * name = "caller_unres_ro_multiple_point";}
;template <> struct value<app::impl::foo_ro_multiple_point>{static constexpr const char * name = "foo_ro_multiple_point";}
;}