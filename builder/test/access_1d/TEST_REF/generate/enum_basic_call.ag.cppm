//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {caller_ro_foo_portion_ro_app_0 = 2,caller_ro_foo_whole_ro_app_0 = 3,caller_rw_foo_portion_rw_app_0 = 4,caller_rw_foo_whole_rw_app_0 = 5};using enabled_calls = util::sequence::enum_t<call,call::caller_ro_foo_portion_ro_app_0,call::caller_ro_foo_whole_ro_app_0,call::caller_rw_foo_portion_rw_app_0,call::caller_rw_foo_whole_rw_app_0>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::caller_ro_foo_portion_ro_app_0>{static constexpr const char * name = "caller_ro_foo_portion_ro_app_0";}
;template <> struct value<app::call::caller_ro_foo_whole_ro_app_0>{static constexpr const char * name = "caller_ro_foo_whole_ro_app_0";}
;template <> struct value<app::call::caller_rw_foo_portion_rw_app_0>{static constexpr const char * name = "caller_rw_foo_portion_rw_app_0";}
;template <> struct value<app::call::caller_rw_foo_whole_rw_app_0>{static constexpr const char * name = "caller_rw_foo_whole_rw_app_0";}
;}export
namespace app{enum class id : enum_uint_t {caller_ro = 2,caller_rw = 3,foo_portion_ro_app = 4,foo_portion_rw_app = 5,foo_whole_ro_app = 6,foo_whole_rw_app = 7};using enabled_ids = util::sequence::enum_t<id,id::caller_ro,id::caller_rw,id::foo_portion_ro_app,id::foo_portion_rw_app,id::foo_whole_ro_app,id::foo_whole_rw_app>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::caller_ro>{static constexpr const char * name = "caller_ro";}
;template <> struct value<app::id::caller_rw>{static constexpr const char * name = "caller_rw";}
;template <> struct value<app::id::foo_portion_ro_app>{static constexpr const char * name = "foo_portion_ro_app";}
;template <> struct value<app::id::foo_portion_rw_app>{static constexpr const char * name = "foo_portion_rw_app";}
;template <> struct value<app::id::foo_whole_ro_app>{static constexpr const char * name = "foo_whole_ro_app";}
;template <> struct value<app::id::foo_whole_rw_app>{static constexpr const char * name = "foo_whole_rw_app";}
;}export
namespace app{enum class impl : enum_uint_t {caller_ro = 2,caller_rw = 3,foo_portion_ro = 4,foo_portion_rw = 5,foo_whole_ro = 6,foo_whole_rw = 7};using enabled_impls = util::sequence::enum_t<impl,impl::caller_ro,impl::caller_rw,impl::foo_portion_ro,impl::foo_portion_rw,impl::foo_whole_ro,impl::foo_whole_rw>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::caller_ro>{static constexpr const char * name = "caller_ro";}
;template <> struct value<app::impl::caller_rw>{static constexpr const char * name = "caller_rw";}
;template <> struct value<app::impl::foo_portion_ro>{static constexpr const char * name = "foo_portion_ro";}
;template <> struct value<app::impl::foo_portion_rw>{static constexpr const char * name = "foo_portion_rw";}
;template <> struct value<app::impl::foo_whole_ro>{static constexpr const char * name = "foo_whole_ro";}
;template <> struct value<app::impl::foo_whole_rw>{static constexpr const char * name = "foo_whole_rw";}
;}