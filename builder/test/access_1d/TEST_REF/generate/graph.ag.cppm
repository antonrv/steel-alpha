//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Graph;
export import App.Enum;
import SteelRT.Util.Sequence;
import SteelRT.Util.Types;
import SteelRT.Util.Tuple;
import SteelRT.Util.FwDeclarations.App;
import SteelRT.Dep.Guard.Backend;
import SteelRT.Data.View;
export
namespace app{
template <> struct traits<id::caller_different_callee>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_different_callee>;};template <> struct traits<id::caller_geq_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_geq_sub>;};template <> struct traits<id::caller_gt_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_gt_sub>;};template <> struct traits<id::caller_leq_add>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_leq_add>;};template <> struct traits<id::caller_lt_add>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_lt_add>;};template <> struct traits<id::caller_res_ro_multiple_point>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_res_ro_multiple_point>;};template <> struct traits<id::caller_ro>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_ro>;};template <> struct traits<id::caller_rw>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_rw>;};template <> struct traits<id::caller_same_callee>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_same_callee>;};template <> struct traits<id::caller_same_n_different_callee>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_same_n_different_callee>;};template <> struct traits<id::caller_shift_end>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_shift_end>;};template <> struct traits<id::caller_shift_literal>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_shift_literal>;};template <> struct traits<id::caller_shift_start>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_shift_start>;};template <> struct traits<id::caller_shift_start_end>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_shift_start_end>;};template <> struct traits<id::caller_unres_ro_multiple_point>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_unres_ro_multiple_point>;};template <> struct traits<id::caller_wo>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_wo>;};template <> struct traits<id::dot_prod_app>{using impl_sequence = util::sequence::enum_t<impl,impl::dot_prod_v1,impl::dot_prod_v2>;};template <> struct traits<id::foo_geq_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_geq_sub>;};template <> struct traits<id::foo_gt_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_gt_sub>;};template <> struct traits<id::foo_leq_add>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_leq_add>;};template <> struct traits<id::foo_lt_add>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_lt_add>;};template <> struct traits<id::foo_portion_ro_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_portion_ro>;};template <> struct traits<id::foo_portion_rw_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_portion_rw>;};template <> struct traits<id::foo_ro_multiple_point_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_ro_multiple_point>;};template <> struct traits<id::foo_shift_end>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_shift_end>;};template <> struct traits<id::foo_shift_literal>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_shift_literal>;};template <> struct traits<id::foo_shift_start>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_shift_start>;};template <> struct traits<id::foo_shift_start_end>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_shift_start_end>;};template <> struct traits<id::foo_whole_ro_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_whole_ro>;};template <> struct traits<id::foo_whole_rw_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_whole_rw>;};template <> struct traits<id::fooapp_callee_x>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_callee_x>;};template <> struct traits<id::fooapp_callee_y>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_callee_y>;};template <> struct traits<id::fooapp_wo>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_wo>;};template <> struct traits<id::init_app>{using impl_sequence = util::sequence::enum_t<impl,impl::init_v0>;};template <> struct traits<id::init_caller_v0>{using impl_sequence = util::sequence::enum_t<impl,impl::init_caller_v0>;};template <> struct traits<id::reduce_app>{using impl_sequence = util::sequence::enum_t<impl,impl::reduce>;};template <> struct traits<impl::foo_whole_ro> {static constexpr impl this_impl = impl::foo_whole_ro;
static constexpr id belonging_id = id::foo_whole_ro_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_ro_foo_whole_ro_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_ro> {static constexpr impl this_impl = impl::caller_ro;
static constexpr id belonging_id = id::caller_ro;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_ro_foo_whole_ro_app_0>;
};template <> struct traits<impl::foo_portion_ro> {static constexpr impl this_impl = impl::foo_portion_ro;
static constexpr id belonging_id = id::foo_portion_ro_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_ro_foo_portion_ro_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_ro> {static constexpr impl this_impl = impl::caller_ro;
static constexpr id belonging_id = id::caller_ro;
using arg_tuple_type = util::tuple_t<int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_ro_foo_portion_ro_app_0>;
};template <> struct traits<impl::foo_whole_rw> {static constexpr impl this_impl = impl::foo_whole_rw;
static constexpr id belonging_id = id::foo_whole_rw_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_rw_foo_whole_rw_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_rw> {static constexpr impl this_impl = impl::caller_rw;
static constexpr id belonging_id = id::caller_rw;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_rw_foo_whole_rw_app_0>;
};template <> struct traits<impl::foo_portion_rw> {static constexpr impl this_impl = impl::foo_portion_rw;
static constexpr id belonging_id = id::foo_portion_rw_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_rw_foo_portion_rw_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_rw> {static constexpr impl this_impl = impl::caller_rw;
static constexpr id belonging_id = id::caller_rw;
using arg_tuple_type = util::tuple_t<int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_rw_foo_portion_rw_app_0>;
};template <> struct traits<impl::foo_lt_add> {static constexpr impl this_impl = impl::foo_lt_add;
static constexpr id belonging_id = id::foo_lt_add;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_lt_add_foo_lt_add_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_lt_add> {static constexpr impl this_impl = impl::caller_lt_add;
static constexpr id belonging_id = id::caller_lt_add;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_lt_add_foo_lt_add_0>;
};template <> struct traits<impl::foo_leq_add> {static constexpr impl this_impl = impl::foo_leq_add;
static constexpr id belonging_id = id::foo_leq_add;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_leq_add_foo_leq_add_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_leq_add> {static constexpr impl this_impl = impl::caller_leq_add;
static constexpr id belonging_id = id::caller_leq_add;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_leq_add_foo_leq_add_0>;
};template <> struct traits<impl::foo_gt_sub> {static constexpr impl this_impl = impl::foo_gt_sub;
static constexpr id belonging_id = id::foo_gt_sub;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_gt_sub_foo_gt_sub_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_gt_sub> {static constexpr impl this_impl = impl::caller_gt_sub;
static constexpr id belonging_id = id::caller_gt_sub;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_gt_sub_foo_gt_sub_0>;
};template <> struct traits<impl::foo_geq_sub> {static constexpr impl this_impl = impl::foo_geq_sub;
static constexpr id belonging_id = id::foo_geq_sub;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_geq_sub_foo_geq_sub_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_geq_sub> {static constexpr impl this_impl = impl::caller_geq_sub;
static constexpr id belonging_id = id::caller_geq_sub;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_geq_sub_foo_geq_sub_0>;
};template <> struct traits<impl::dot_prod_v1> {static constexpr impl this_impl = impl::dot_prod_v1;
static constexpr id belonging_id = id::dot_prod_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call,call::dot_prod_v2_dot_prod_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::reduce> {static constexpr impl this_impl = impl::reduce;
static constexpr id belonging_id = id::reduce_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call,call::dot_prod_v2_reduce_app_1>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::dot_prod_v2> {static constexpr impl this_impl = impl::dot_prod_v2;
static constexpr id belonging_id = id::dot_prod_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::dot_prod_v2_dot_prod_app_0,call::dot_prod_v2_reduce_app_1>;
};template <> struct traits<impl::foo_callee_x> {static constexpr impl this_impl = impl::foo_callee_x;
static constexpr id belonging_id = id::fooapp_callee_x;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call,call::caller_same_callee_fooapp_callee_x_0,call::caller_same_callee_fooapp_callee_x_1,call::caller_same_callee_fooapp_callee_x_2,call::caller_different_callee_fooapp_callee_x_0,call::caller_same_n_different_callee_fooapp_callee_x_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::foo_callee_y> {static constexpr impl this_impl = impl::foo_callee_y;
static constexpr id belonging_id = id::fooapp_callee_y;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call,call::caller_different_callee_fooapp_callee_y_1,call::caller_same_n_different_callee_fooapp_callee_y_1,call::caller_same_n_different_callee_fooapp_callee_y_2>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_same_callee> {static constexpr impl this_impl = impl::caller_same_callee;
static constexpr id belonging_id = id::caller_same_callee;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_same_callee_fooapp_callee_x_0,call::caller_same_callee_fooapp_callee_x_1,call::caller_same_callee_fooapp_callee_x_2>;
};template <> struct traits<impl::caller_different_callee> {static constexpr impl this_impl = impl::caller_different_callee;
static constexpr id belonging_id = id::caller_different_callee;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_different_callee_fooapp_callee_x_0,call::caller_different_callee_fooapp_callee_y_1>;
};template <> struct traits<impl::caller_same_n_different_callee> {static constexpr impl this_impl = impl::caller_same_n_different_callee;
static constexpr id belonging_id = id::caller_same_n_different_callee;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_same_n_different_callee_fooapp_callee_x_0,call::caller_same_n_different_callee_fooapp_callee_y_1,call::caller_same_n_different_callee_fooapp_callee_y_2>;
};template <> struct traits<impl::foo_wo> {static constexpr impl this_impl = impl::foo_wo;
static constexpr id belonging_id = id::fooapp_wo;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call,call::caller_wo_fooapp_wo_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_wo> {static constexpr impl this_impl = impl::caller_wo;
static constexpr id belonging_id = id::caller_wo;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_wo_fooapp_wo_0>;
};template <> struct traits<impl::foo_ro_multiple_point> {static constexpr impl this_impl = impl::foo_ro_multiple_point;
static constexpr id belonging_id = id::foo_ro_multiple_point_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_0,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_1,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_2,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_res_ro_multiple_point> {static constexpr impl this_impl = impl::caller_res_ro_multiple_point;
static constexpr id belonging_id = id::caller_res_ro_multiple_point;
using arg_tuple_type = util::tuple_t<>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_0,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_1,call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_2>;
};template <> struct traits<impl::caller_unres_ro_multiple_point> {static constexpr impl this_impl = impl::caller_unres_ro_multiple_point;
static constexpr id belonging_id = id::caller_unres_ro_multiple_point;
using arg_tuple_type = util::tuple_t<int,int,int,int,int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1,call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2>;
};template <> struct traits<impl::init_v0> {static constexpr impl this_impl = impl::init_v0;
static constexpr id belonging_id = id::init_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,float>;
using call_sequence = util::sequence::enum_t<call,call::init_caller_v0_init_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::init_caller_v0> {static constexpr impl this_impl = impl::init_caller_v0;
static constexpr id belonging_id = id::init_caller_v0;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::init_caller_v0_init_app_0>;
};template <> struct traits<impl::foo_shift_literal> {static constexpr impl this_impl = impl::foo_shift_literal;
static constexpr id belonging_id = id::foo_shift_literal;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>>;
using call_sequence = util::sequence::enum_t<call,call::caller_shift_literal_foo_shift_literal_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_shift_literal> {static constexpr impl this_impl = impl::caller_shift_literal;
static constexpr id belonging_id = id::caller_shift_literal;
using arg_tuple_type = util::tuple_t<int,std::add_pointer_t<std::add_const_t<float>>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_shift_literal_foo_shift_literal_0>;
};template <> struct traits<impl::foo_shift_start> {static constexpr impl this_impl = impl::foo_shift_start;
static constexpr id belonging_id = id::foo_shift_start;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_shift_start_foo_shift_start_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_shift_start> {static constexpr impl this_impl = impl::caller_shift_start;
static constexpr id belonging_id = id::caller_shift_start;
using arg_tuple_type = util::tuple_t<int,std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_shift_start_foo_shift_start_0>;
};template <> struct traits<impl::foo_shift_end> {static constexpr impl this_impl = impl::foo_shift_end;
static constexpr id belonging_id = id::foo_shift_end;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_shift_end_foo_shift_end_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_shift_end> {static constexpr impl this_impl = impl::caller_shift_end;
static constexpr id belonging_id = id::caller_shift_end;
using arg_tuple_type = util::tuple_t<int,std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_shift_end_foo_shift_end_0>;
};template <> struct traits<impl::foo_shift_start_end> {static constexpr impl this_impl = impl::foo_shift_start_end;
static constexpr id belonging_id = id::foo_shift_start_end;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_shift_start_end_foo_shift_start_end_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_shift_start_end> {static constexpr impl this_impl = impl::caller_shift_start_end;
static constexpr id belonging_id = id::caller_shift_start_end;
using arg_tuple_type = util::tuple_t<int,int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_shift_start_end_foo_shift_start_end_0>;
};template <> struct traits<call::caller_ro_foo_whole_ro_app_0> {static constexpr call this_call = call::caller_ro_foo_whole_ro_app_0;
static constexpr impl belonging_impl = impl::foo_whole_ro;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int>;
};template <> struct traits<call::caller_ro_foo_portion_ro_app_0> {static constexpr call this_call = call::caller_ro_foo_portion_ro_app_0;
static constexpr impl belonging_impl = impl::foo_portion_ro;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::caller_rw_foo_whole_rw_app_0> {static constexpr call this_call = call::caller_rw_foo_whole_rw_app_0;
static constexpr impl belonging_impl = impl::foo_whole_rw;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,int>;
};template <> struct traits<call::caller_rw_foo_portion_rw_app_0> {static constexpr call this_call = call::caller_rw_foo_portion_rw_app_0;
static constexpr impl belonging_impl = impl::foo_portion_rw;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::caller_lt_add_foo_lt_add_0> {static constexpr call this_call = call::caller_lt_add_foo_lt_add_0;
static constexpr impl belonging_impl = impl::foo_lt_add;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int>;
};template <> struct traits<call::caller_leq_add_foo_leq_add_0> {static constexpr call this_call = call::caller_leq_add_foo_leq_add_0;
static constexpr impl belonging_impl = impl::foo_leq_add;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int>;
};template <> struct traits<call::caller_gt_sub_foo_gt_sub_0> {static constexpr call this_call = call::caller_gt_sub_foo_gt_sub_0;
static constexpr impl belonging_impl = impl::foo_gt_sub;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int>;
};template <> struct traits<call::caller_geq_sub_foo_geq_sub_0> {static constexpr call this_call = call::caller_geq_sub_foo_geq_sub_0;
static constexpr impl belonging_impl = impl::foo_geq_sub;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int>;
};template <> struct traits<call::dot_prod_v2_dot_prod_app_0> {static constexpr call this_call = call::dot_prod_v2_dot_prod_app_0;
static constexpr impl belonging_impl = impl::dot_prod_v1;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,dep::guard::bnd::readable<data::view<1,const float>>,dep::guard::bnd::readable<data::view<1,const float>>,const unsigned>;
};template <> struct traits<call::dot_prod_v2_reduce_app_1> {static constexpr call this_call = call::dot_prod_v2_reduce_app_1;
static constexpr impl belonging_impl = impl::reduce;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<0,float>>,dep::guard::bnd::readable<data::view<1,const float>>,const unsigned>;
};template <> struct traits<call::caller_same_callee_fooapp_callee_x_0> {static constexpr call this_call = call::caller_same_callee_fooapp_callee_x_0;
static constexpr impl belonging_impl = impl::foo_callee_x;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,const unsigned>;
};template <> struct traits<call::caller_same_callee_fooapp_callee_x_1> {static constexpr call this_call = call::caller_same_callee_fooapp_callee_x_1;
static constexpr impl belonging_impl = impl::foo_callee_x;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,const unsigned>;
};template <> struct traits<call::caller_same_callee_fooapp_callee_x_2> {static constexpr call this_call = call::caller_same_callee_fooapp_callee_x_2;
static constexpr impl belonging_impl = impl::foo_callee_x;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,const unsigned>;
};template <> struct traits<call::caller_different_callee_fooapp_callee_x_0> {static constexpr call this_call = call::caller_different_callee_fooapp_callee_x_0;
static constexpr impl belonging_impl = impl::foo_callee_x;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,const unsigned>;
};template <> struct traits<call::caller_different_callee_fooapp_callee_y_1> {static constexpr call this_call = call::caller_different_callee_fooapp_callee_y_1;
static constexpr impl belonging_impl = impl::foo_callee_y;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,const unsigned>;
};template <> struct traits<call::caller_same_n_different_callee_fooapp_callee_x_0> {static constexpr call this_call = call::caller_same_n_different_callee_fooapp_callee_x_0;
static constexpr impl belonging_impl = impl::foo_callee_x;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,const unsigned>;
};template <> struct traits<call::caller_same_n_different_callee_fooapp_callee_y_1> {static constexpr call this_call = call::caller_same_n_different_callee_fooapp_callee_y_1;
static constexpr impl belonging_impl = impl::foo_callee_y;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,const unsigned>;
};template <> struct traits<call::caller_same_n_different_callee_fooapp_callee_y_2> {static constexpr call this_call = call::caller_same_n_different_callee_fooapp_callee_y_2;
static constexpr impl belonging_impl = impl::foo_callee_y;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,const unsigned>;
};template <> struct traits<call::caller_wo_fooapp_wo_0> {static constexpr call this_call = call::caller_wo_fooapp_wo_0;
static constexpr impl belonging_impl = impl::foo_wo;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,const unsigned>;
};template <> struct traits<call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_0> {static constexpr call this_call = call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_0;
static constexpr impl belonging_impl = impl::foo_ro_multiple_point;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_1> {static constexpr call this_call = call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_1;
static constexpr impl belonging_impl = impl::foo_ro_multiple_point;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_2> {static constexpr call this_call = call::caller_res_ro_multiple_point_foo_ro_multiple_point_app_2;
static constexpr impl belonging_impl = impl::foo_ro_multiple_point;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0> {static constexpr call this_call = call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_0;
static constexpr impl belonging_impl = impl::foo_ro_multiple_point;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1> {static constexpr call this_call = call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_1;
static constexpr impl belonging_impl = impl::foo_ro_multiple_point;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2> {static constexpr call this_call = call::caller_unres_ro_multiple_point_foo_ro_multiple_point_app_2;
static constexpr impl belonging_impl = impl::foo_ro_multiple_point;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};template <> struct traits<call::init_caller_v0_init_app_0> {static constexpr call this_call = call::init_caller_v0_init_app_0;
static constexpr impl belonging_impl = impl::init_v0;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,float>;
};template <> struct traits<call::caller_shift_literal_foo_shift_literal_0> {static constexpr call this_call = call::caller_shift_literal_foo_shift_literal_0;
static constexpr impl belonging_impl = impl::foo_shift_literal;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>>;
};template <> struct traits<call::caller_shift_start_foo_shift_start_0> {static constexpr call this_call = call::caller_shift_start_foo_shift_start_0;
static constexpr impl belonging_impl = impl::foo_shift_start;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int>;
};template <> struct traits<call::caller_shift_end_foo_shift_end_0> {static constexpr call this_call = call::caller_shift_end_foo_shift_end_0;
static constexpr impl belonging_impl = impl::foo_shift_end;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int>;
};template <> struct traits<call::caller_shift_start_end_foo_shift_start_end_0> {static constexpr call this_call = call::caller_shift_start_end_foo_shift_start_end_0;
static constexpr impl belonging_impl = impl::foo_shift_start_end;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<1,const float>>,int,int>;
};}