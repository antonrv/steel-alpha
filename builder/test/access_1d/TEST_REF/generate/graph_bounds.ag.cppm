//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Graph;
export import App.Enum;
import Plat.Enum;
import SteelRT.Util.Sequence;
import SteelRT.Util.Types;
import SteelRT.Util.Tuple;
import SteelRT.Util.FwDeclarations.App;
import SteelRT.Dep.Guard.Backend;
import SteelRT.Dep.Dim.View;
export
namespace app{
template <> struct traits<id::caller_geq_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_geq_sub>;};template <> struct traits<id::caller_gt_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_gt_sub>;};template <> struct traits<id::caller_leq_add>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_leq_add>;};template <> struct traits<id::caller_lt_add>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_lt_add>;};template <> struct traits<id::foo_geq_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_geq_sub>;};template <> struct traits<id::foo_gt_sub>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_gt_sub>;};template <> struct traits<id::foo_leq_add>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_leq_add>;};template <> struct traits<id::foo_lt_add>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_lt_add>;};template <> struct traits<impl::foo_lt_add> {static constexpr impl this_impl = impl::foo_lt_add;
static constexpr id belonging_id = id::foo_lt_add;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_lt_add_foo_lt_add_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_lt_add> {static constexpr impl this_impl = impl::caller_lt_add;
static constexpr id belonging_id = id::caller_lt_add;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_lt_add_foo_lt_add_0>;
};template <> struct traits<impl::foo_leq_add> {static constexpr impl this_impl = impl::foo_leq_add;
static constexpr id belonging_id = id::foo_leq_add;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_leq_add_foo_leq_add_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_leq_add> {static constexpr impl this_impl = impl::caller_leq_add;
static constexpr id belonging_id = id::caller_leq_add;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_leq_add_foo_leq_add_0>;
};template <> struct traits<impl::foo_gt_sub> {static constexpr impl this_impl = impl::foo_gt_sub;
static constexpr id belonging_id = id::foo_gt_sub;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_gt_sub_foo_gt_sub_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_gt_sub> {static constexpr impl this_impl = impl::caller_gt_sub;
static constexpr id belonging_id = id::caller_gt_sub;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_gt_sub_foo_gt_sub_0>;
};template <> struct traits<impl::foo_geq_sub> {static constexpr impl this_impl = impl::foo_geq_sub;
static constexpr id belonging_id = id::foo_geq_sub;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_geq_sub_foo_geq_sub_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_geq_sub> {static constexpr impl this_impl = impl::caller_geq_sub;
static constexpr id belonging_id = id::caller_geq_sub;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_geq_sub_foo_geq_sub_0>;
};template <> struct traits<call::caller_lt_add_foo_lt_add_0> {static constexpr call this_call = call::caller_lt_add_foo_lt_add_0;
static constexpr impl belonging_impl = impl::foo_lt_add;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<dep::dim::view<1,float>>,int>;
};template <> struct traits<call::caller_leq_add_foo_leq_add_0> {static constexpr call this_call = call::caller_leq_add_foo_leq_add_0;
static constexpr impl belonging_impl = impl::foo_leq_add;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<dep::dim::view<1,float>>,int>;
};template <> struct traits<call::caller_gt_sub_foo_gt_sub_0> {static constexpr call this_call = call::caller_gt_sub_foo_gt_sub_0;
static constexpr impl belonging_impl = impl::foo_gt_sub;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<dep::dim::view<1,float>>,int>;
};template <> struct traits<call::caller_geq_sub_foo_geq_sub_0> {static constexpr call this_call = call::caller_geq_sub_foo_geq_sub_0;
static constexpr impl belonging_impl = impl::foo_geq_sub;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<dep::dim::view<1,float>>,int>;
};}