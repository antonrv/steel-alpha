//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Proxy;
export import App.Graph;
export import SteelRT.Util.Types;
export import SteelRT.Util.Sequence;
export import SteelRT.Util.FwDeclarations.App;
export import SteelRT.Util.Predicates.App;
export import SteelRT.Task.Descriptor;
export import SteelRT.Task.Dispatcher;
export import SteelRT.Work.Descriptor.Global;
export import SteelRT.Dep.MakeAsync;
export import SteelRT.Dep.Guard.Backend;
export import SteelRT.Dep.Guard.Frontend;
export import SteelRT.Dep.Wrap;
export import <type_traits>;
export import <stdexcept>;
void foo_whole_ro(std::add_pointer_t<std::add_const_t<float>>,int);
task::coro::dispatcher<app::impl::caller_ro> caller_ro(task::attr::descriptor& ,int);
void foo_portion_ro(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_ro> caller_ro(task::attr::descriptor& ,int,int);
void foo_whole_rw(std::add_pointer_t<float>,int);
task::coro::dispatcher<app::impl::caller_rw> caller_rw(task::attr::descriptor& ,int);
void foo_portion_rw(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_rw> caller_rw(task::attr::descriptor& ,int,int);
void foo_lt_add(std::add_pointer_t<std::add_const_t<float>>,int);
task::coro::dispatcher<app::impl::caller_lt_add> caller_lt_add(task::attr::descriptor& ,int);
void foo_leq_add(std::add_pointer_t<std::add_const_t<float>>,int);
task::coro::dispatcher<app::impl::caller_leq_add> caller_leq_add(task::attr::descriptor& ,int);
void foo_gt_sub(std::add_pointer_t<std::add_const_t<float>>,int);
task::coro::dispatcher<app::impl::caller_gt_sub> caller_gt_sub(task::attr::descriptor& ,int);
void foo_geq_sub(std::add_pointer_t<std::add_const_t<float>>,int);
task::coro::dispatcher<app::impl::caller_geq_sub> caller_geq_sub(task::attr::descriptor& ,int);
void dot_prod_v1(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>);
void reduce(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::dot_prod_v2> dot_prod_v2(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
void foo_callee_x(std::add_pointer_t<float>,std::add_const_t<unsigned>);
void foo_callee_y(std::add_pointer_t<std::add_const_t<float>>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::caller_same_callee> caller_same_callee(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::caller_different_callee> caller_different_callee(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::caller_same_n_different_callee> caller_same_n_different_callee(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
void foo_wo(std::add_pointer_t<float>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::caller_wo> caller_wo(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
void foo_ro_multiple_point(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_res_ro_multiple_point> caller_res_ro_multiple_point(task::attr::descriptor& );
task::coro::dispatcher<app::impl::caller_unres_ro_multiple_point> caller_unres_ro_multiple_point(task::attr::descriptor& ,int,int,int,int,int,int);
void init_v0(std::add_pointer_t<float>,float);
task::coro::dispatcher<app::impl::init_caller_v0> init_caller_v0(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>);
void foo_shift_literal(std::add_pointer_t<std::add_const_t<float>>);
task::coro::dispatcher<app::impl::caller_shift_literal> caller_shift_literal(task::attr::descriptor& ,int,std::add_pointer_t<std::add_const_t<float>>);
void foo_shift_start(std::add_pointer_t<std::add_const_t<float>>,int);
task::coro::dispatcher<app::impl::caller_shift_start> caller_shift_start(task::attr::descriptor& ,int,std::add_pointer_t<std::add_const_t<float>>,int);
void foo_shift_end(std::add_pointer_t<std::add_const_t<float>>,int);
task::coro::dispatcher<app::impl::caller_shift_end> caller_shift_end(task::attr::descriptor& ,int,std::add_pointer_t<std::add_const_t<float>>,int);
void foo_shift_start_end(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_shift_start_end> caller_shift_start_end(task::attr::descriptor& ,int,int,int);
export
namespace app{
template <>
class kernel_proxy<impl::foo_whole_ro> {
  static constexpr impl this_impl = impl::foo_whole_ro;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_whole_ro( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_ro> {
public:
  static constexpr impl this_impl = impl::caller_ro;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_ro( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_portion_ro> {
  static constexpr impl this_impl = impl::foo_portion_ro;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_portion_ro( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_ro> {
public:
  static constexpr impl this_impl = impl::caller_ro;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_ro( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_whole_rw> {
  static constexpr impl this_impl = impl::foo_whole_rw;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_whole_rw( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_rw> {
public:
  static constexpr impl this_impl = impl::caller_rw;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_rw( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_portion_rw> {
  static constexpr impl this_impl = impl::foo_portion_rw;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_portion_rw( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_rw> {
public:
  static constexpr impl this_impl = impl::caller_rw;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_rw( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_lt_add> {
  static constexpr impl this_impl = impl::foo_lt_add;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_lt_add( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_lt_add> {
public:
  static constexpr impl this_impl = impl::caller_lt_add;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_lt_add( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_leq_add> {
  static constexpr impl this_impl = impl::foo_leq_add;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_leq_add( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_leq_add> {
public:
  static constexpr impl this_impl = impl::caller_leq_add;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_leq_add( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_gt_sub> {
  static constexpr impl this_impl = impl::foo_gt_sub;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_gt_sub( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_gt_sub> {
public:
  static constexpr impl this_impl = impl::caller_gt_sub;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_gt_sub( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_geq_sub> {
  static constexpr impl this_impl = impl::foo_geq_sub;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_geq_sub( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_geq_sub> {
public:
  static constexpr impl this_impl = impl::caller_geq_sub;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_geq_sub( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::dot_prod_v1> {
  static constexpr impl this_impl = impl::dot_prod_v1;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    dot_prod_v1( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::reduce> {
  static constexpr impl this_impl = impl::reduce;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    reduce( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::dot_prod_v2> {
public:
  static constexpr impl this_impl = impl::dot_prod_v2;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( dot_prod_v2( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_callee_x> {
  static constexpr impl this_impl = impl::foo_callee_x;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_callee_x( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::foo_callee_y> {
  static constexpr impl this_impl = impl::foo_callee_y;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_callee_y( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_same_callee> {
public:
  static constexpr impl this_impl = impl::caller_same_callee;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_same_callee( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class dispatcher_proxy<impl::caller_different_callee> {
public:
  static constexpr impl this_impl = impl::caller_different_callee;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_different_callee( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class dispatcher_proxy<impl::caller_same_n_different_callee> {
public:
  static constexpr impl this_impl = impl::caller_same_n_different_callee;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_same_n_different_callee( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_wo> {
  static constexpr impl this_impl = impl::foo_wo;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_wo( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_wo> {
public:
  static constexpr impl this_impl = impl::caller_wo;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_wo( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_ro_multiple_point> {
  static constexpr impl this_impl = impl::foo_ro_multiple_point;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_ro_multiple_point( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_res_ro_multiple_point> {
public:
  static constexpr impl this_impl = impl::caller_res_ro_multiple_point;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_res_ro_multiple_point( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class dispatcher_proxy<impl::caller_unres_ro_multiple_point> {
public:
  static constexpr impl this_impl = impl::caller_unres_ro_multiple_point;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_unres_ro_multiple_point( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::init_v0> {
  static constexpr impl this_impl = impl::init_v0;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    init_v0( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::init_caller_v0> {
public:
  static constexpr impl this_impl = impl::init_caller_v0;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( init_caller_v0( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_shift_literal> {
  static constexpr impl this_impl = impl::foo_shift_literal;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_shift_literal( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_shift_literal> {
public:
  static constexpr impl this_impl = impl::caller_shift_literal;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_shift_literal( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_shift_start> {
  static constexpr impl this_impl = impl::foo_shift_start;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_shift_start( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_shift_start> {
public:
  static constexpr impl this_impl = impl::caller_shift_start;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_shift_start( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_shift_end> {
  static constexpr impl this_impl = impl::foo_shift_end;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_shift_end( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_shift_end> {
public:
  static constexpr impl this_impl = impl::caller_shift_end;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_shift_end( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_shift_start_end> {
  static constexpr impl this_impl = impl::foo_shift_start_end;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_shift_start_end( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_shift_start_end> {
public:
  static constexpr impl this_impl = impl::caller_shift_start_end;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_shift_start_end( std::forward<DispatcherArgs>(args) ... ) );
  }
};
}