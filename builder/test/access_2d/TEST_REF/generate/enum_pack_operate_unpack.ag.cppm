//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {operate_matrix_v2_app_allocate_matrix_0 = 2,operate_matrix_v2_app_deallocate_matrix_4 = 3,operate_matrix_v2_app_operate_matrix_2 = 4,operate_matrix_v2_app_pack_matrix_1 = 5,operate_matrix_v2_app_unpack_matrix_3 = 6};using enabled_calls = util::sequence::enum_t<call,call::operate_matrix_v2_app_allocate_matrix_0,call::operate_matrix_v2_app_deallocate_matrix_4,call::operate_matrix_v2_app_operate_matrix_2,call::operate_matrix_v2_app_pack_matrix_1,call::operate_matrix_v2_app_unpack_matrix_3>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::operate_matrix_v2_app_allocate_matrix_0>{static constexpr const char * name = "operate_matrix_v2_app_allocate_matrix_0";}
;template <> struct value<app::call::operate_matrix_v2_app_deallocate_matrix_4>{static constexpr const char * name = "operate_matrix_v2_app_deallocate_matrix_4";}
;template <> struct value<app::call::operate_matrix_v2_app_operate_matrix_2>{static constexpr const char * name = "operate_matrix_v2_app_operate_matrix_2";}
;template <> struct value<app::call::operate_matrix_v2_app_pack_matrix_1>{static constexpr const char * name = "operate_matrix_v2_app_pack_matrix_1";}
;template <> struct value<app::call::operate_matrix_v2_app_unpack_matrix_3>{static constexpr const char * name = "operate_matrix_v2_app_unpack_matrix_3";}
;}export
namespace app{enum class id : enum_uint_t {app_allocate_matrix = 2,app_deallocate_matrix = 3,app_operate_matrix = 4,app_pack_matrix = 5,app_unpack_matrix = 6};using enabled_ids = util::sequence::enum_t<id,id::app_allocate_matrix,id::app_deallocate_matrix,id::app_operate_matrix,id::app_pack_matrix,id::app_unpack_matrix>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::app_allocate_matrix>{static constexpr const char * name = "app_allocate_matrix";}
;template <> struct value<app::id::app_deallocate_matrix>{static constexpr const char * name = "app_deallocate_matrix";}
;template <> struct value<app::id::app_operate_matrix>{static constexpr const char * name = "app_operate_matrix";}
;template <> struct value<app::id::app_pack_matrix>{static constexpr const char * name = "app_pack_matrix";}
;template <> struct value<app::id::app_unpack_matrix>{static constexpr const char * name = "app_unpack_matrix";}
;}export
namespace app{enum class impl : enum_uint_t {allocate_matrix = 2,deallocate_matrix = 3,operate_matrix_v1 = 4,operate_matrix_v2 = 5,pack_copy_matrix = 6,unpack_copy_matrix = 7};using enabled_impls = util::sequence::enum_t<impl,impl::allocate_matrix,impl::deallocate_matrix,impl::operate_matrix_v1,impl::operate_matrix_v2,impl::pack_copy_matrix,impl::unpack_copy_matrix>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::allocate_matrix>{static constexpr const char * name = "allocate_matrix";}
;template <> struct value<app::impl::deallocate_matrix>{static constexpr const char * name = "deallocate_matrix";}
;template <> struct value<app::impl::operate_matrix_v1>{static constexpr const char * name = "operate_matrix_v1";}
;template <> struct value<app::impl::operate_matrix_v2>{static constexpr const char * name = "operate_matrix_v2";}
;template <> struct value<app::impl::pack_copy_matrix>{static constexpr const char * name = "pack_copy_matrix";}
;template <> struct value<app::impl::unpack_copy_matrix>{static constexpr const char * name = "unpack_copy_matrix";}
;}