//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Graph;
export import App.Enum;
import SteelRT.Util.Sequence;
import SteelRT.Util.Types;
import SteelRT.Util.Tuple;
import SteelRT.Util.FwDeclarations.App;
import SteelRT.Dep.Guard.Backend;
import SteelRT.Data.View;
export
namespace app{
template <> struct traits<id::app_allocate_matrix>{using impl_sequence = util::sequence::enum_t<impl,impl::allocate_matrix>;};template <> struct traits<id::app_deallocate_matrix>{using impl_sequence = util::sequence::enum_t<impl,impl::deallocate_matrix>;};template <> struct traits<id::app_operate_matrix>{using impl_sequence = util::sequence::enum_t<impl,impl::operate_matrix_v1,impl::operate_matrix_v2>;};template <> struct traits<id::app_pack>{using impl_sequence = util::sequence::enum_t<impl,impl::pack_matrix>;};template <> struct traits<id::app_pack_matrix>{using impl_sequence = util::sequence::enum_t<impl,impl::pack_copy_matrix>;};template <> struct traits<id::app_unpack>{using impl_sequence = util::sequence::enum_t<impl,impl::unpack_matrix>;};template <> struct traits<id::app_unpack_matrix>{using impl_sequence = util::sequence::enum_t<impl,impl::unpack_copy_matrix>;};template <> struct traits<id::caller1_foo>{using impl_sequence = util::sequence::enum_t<impl,impl::caller1_foo>;};template <> struct traits<id::caller2_foo>{using impl_sequence = util::sequence::enum_t<impl,impl::caller2_foo>;};template <> struct traits<id::caller3_foo>{using impl_sequence = util::sequence::enum_t<impl,impl::caller3_foo>;};template <> struct traits<id::caller_blocks>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_blocks>;};template <> struct traits<id::caller_low_triangle>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_low_triangle>;};template <> struct traits<id::caller_rectangle>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_rectangle>;};template <> struct traits<id::caller_up_triangle>{using impl_sequence = util::sequence::enum_t<impl,impl::caller_up_triangle>;};template <> struct traits<id::foo_1d_blocks_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_blocks>;};template <> struct traits<id::foo_low_tri_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_low_triangle>;};template <> struct traits<id::foo_rectangle_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_rectangle>;};template <> struct traits<id::foo_up_tri_app>{using impl_sequence = util::sequence::enum_t<impl,impl::foo_up_triangle>;};template <> struct traits<id::fooapp_wo>{using impl_sequence = util::sequence::enum_t<impl,impl::foo>;};template <> struct traits<id::mat_product_app>{using impl_sequence = util::sequence::enum_t<impl,impl::mat_product_v0_kernel_compact,impl::mat_product_v1_kernel_strided,impl::mat_product_v2_block_strided,impl::mat_product_v3_block_compact>;};template <> struct traits<id::mat_vec_app>{using impl_sequence = util::sequence::enum_t<impl,impl::mat_vec_v1,impl::mat_vec_v2>;};template <> struct traits<id::matrix_allocate>{using impl_sequence = util::sequence::enum_t<impl,impl::allocate_matrix>;};template <> struct traits<id::matrix_deallocate>{using impl_sequence = util::sequence::enum_t<impl,impl::deallocate_matrix>;};template <> struct traits<id::matrix_pack>{using impl_sequence = util::sequence::enum_t<impl,impl::pack_matrix>;};template <> struct traits<id::pack_matrix_caller>{using impl_sequence = util::sequence::enum_t<impl,impl::pack_matrix_caller>;};template <> struct traits<impl::allocate_matrix> {static constexpr impl this_impl = impl::allocate_matrix;
static constexpr id belonging_id = id::matrix_allocate;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_allocate_0,call::mat_product_v3_block_compact_matrix_allocate_1,call::mat_product_v3_block_compact_matrix_allocate_2,call::pack_matrix_caller_matrix_allocate_0,call::operate_matrix_v2_app_allocate_matrix_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::deallocate_matrix> {static constexpr impl this_impl = impl::deallocate_matrix;
static constexpr id belonging_id = id::matrix_deallocate;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_deallocate_8,call::mat_product_v3_block_compact_matrix_deallocate_9,call::mat_product_v3_block_compact_matrix_deallocate_10,call::pack_matrix_caller_matrix_deallocate_2,call::operate_matrix_v2_app_deallocate_matrix_4>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::mat_product_v0_kernel_compact> {static constexpr impl this_impl = impl::mat_product_v0_kernel_compact;
static constexpr id belonging_id = id::mat_product_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_mat_product_app_6>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::pack_matrix> {static constexpr impl this_impl = impl::pack_matrix;
static constexpr id belonging_id = id::app_pack;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_app_pack_3,call::mat_product_v3_block_compact_app_pack_4,call::mat_product_v3_block_compact_app_pack_5,call::pack_matrix_caller_matrix_pack_1>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::unpack_matrix> {static constexpr impl this_impl = impl::unpack_matrix;
static constexpr id belonging_id = id::app_unpack;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_app_unpack_7>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::mat_product_v3_block_compact> {static constexpr impl this_impl = impl::mat_product_v3_block_compact;
static constexpr id belonging_id = id::mat_product_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_allocate_0,call::mat_product_v3_block_compact_matrix_allocate_1,call::mat_product_v3_block_compact_matrix_allocate_2,call::mat_product_v3_block_compact_app_pack_3,call::mat_product_v3_block_compact_app_pack_4,call::mat_product_v3_block_compact_app_pack_5,call::mat_product_v3_block_compact_mat_product_app_6,call::mat_product_v3_block_compact_app_unpack_7,call::mat_product_v3_block_compact_matrix_deallocate_8,call::mat_product_v3_block_compact_matrix_deallocate_9,call::mat_product_v3_block_compact_matrix_deallocate_10>;
};template <> struct traits<impl::mat_product_v1_kernel_strided> {static constexpr impl this_impl = impl::mat_product_v1_kernel_strided;
static constexpr id belonging_id = id::mat_product_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v2_block_strided_mat_product_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::mat_product_v2_block_strided> {static constexpr impl this_impl = impl::mat_product_v2_block_strided;
static constexpr id belonging_id = id::mat_product_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::mat_product_v2_block_strided_mat_product_app_0>;
};template <> struct traits<impl::mat_vec_v1> {static constexpr impl this_impl = impl::mat_vec_v1;
static constexpr id belonging_id = id::mat_vec_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_vec_v2_mat_vec_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::mat_vec_v2> {static constexpr impl this_impl = impl::mat_vec_v2;
static constexpr id belonging_id = id::mat_vec_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::mat_vec_v2_mat_vec_app_0>;
};template <> struct traits<impl::foo> {static constexpr impl this_impl = impl::foo;
static constexpr id belonging_id = id::fooapp_wo;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call,call::caller1_foo_fooapp_wo_0,call::caller2_foo_fooapp_wo_0,call::caller3_foo_fooapp_wo_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller1_foo> {static constexpr impl this_impl = impl::caller1_foo;
static constexpr id belonging_id = id::caller1_foo;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller1_foo_fooapp_wo_0>;
};template <> struct traits<impl::caller2_foo> {static constexpr impl this_impl = impl::caller2_foo;
static constexpr id belonging_id = id::caller2_foo;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller2_foo_fooapp_wo_0>;
};template <> struct traits<impl::caller3_foo> {static constexpr impl this_impl = impl::caller3_foo;
static constexpr id belonging_id = id::caller3_foo;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller3_foo_fooapp_wo_0>;
};template <> struct traits<impl::pack_matrix> {static constexpr impl this_impl = impl::pack_matrix;
static constexpr id belonging_id = id::matrix_pack;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_app_pack_3,call::mat_product_v3_block_compact_app_pack_4,call::mat_product_v3_block_compact_app_pack_5,call::pack_matrix_caller_matrix_pack_1>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::allocate_matrix> {static constexpr impl this_impl = impl::allocate_matrix;
static constexpr id belonging_id = id::matrix_allocate;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_allocate_0,call::mat_product_v3_block_compact_matrix_allocate_1,call::mat_product_v3_block_compact_matrix_allocate_2,call::pack_matrix_caller_matrix_allocate_0,call::operate_matrix_v2_app_allocate_matrix_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::deallocate_matrix> {static constexpr impl this_impl = impl::deallocate_matrix;
static constexpr id belonging_id = id::matrix_deallocate;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_deallocate_8,call::mat_product_v3_block_compact_matrix_deallocate_9,call::mat_product_v3_block_compact_matrix_deallocate_10,call::pack_matrix_caller_matrix_deallocate_2,call::operate_matrix_v2_app_deallocate_matrix_4>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::pack_matrix_caller> {static constexpr impl this_impl = impl::pack_matrix_caller;
static constexpr id belonging_id = id::pack_matrix_caller;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::pack_matrix_caller_matrix_allocate_0,call::pack_matrix_caller_matrix_pack_1,call::pack_matrix_caller_matrix_deallocate_2>;
};template <> struct traits<impl::allocate_matrix> {static constexpr impl this_impl = impl::allocate_matrix;
static constexpr id belonging_id = id::app_allocate_matrix;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_allocate_0,call::mat_product_v3_block_compact_matrix_allocate_1,call::mat_product_v3_block_compact_matrix_allocate_2,call::pack_matrix_caller_matrix_allocate_0,call::operate_matrix_v2_app_allocate_matrix_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::deallocate_matrix> {static constexpr impl this_impl = impl::deallocate_matrix;
static constexpr id belonging_id = id::app_deallocate_matrix;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_deallocate_8,call::mat_product_v3_block_compact_matrix_deallocate_9,call::mat_product_v3_block_compact_matrix_deallocate_10,call::pack_matrix_caller_matrix_deallocate_2,call::operate_matrix_v2_app_deallocate_matrix_4>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::pack_copy_matrix> {static constexpr impl this_impl = impl::pack_copy_matrix;
static constexpr id belonging_id = id::app_pack_matrix;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::operate_matrix_v2_app_pack_matrix_1>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::unpack_copy_matrix> {static constexpr impl this_impl = impl::unpack_copy_matrix;
static constexpr id belonging_id = id::app_unpack_matrix;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::operate_matrix_v2_app_unpack_matrix_3>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::operate_matrix_v1> {static constexpr impl this_impl = impl::operate_matrix_v1;
static constexpr id belonging_id = id::app_operate_matrix;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::operate_matrix_v2_app_operate_matrix_2>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::operate_matrix_v2> {static constexpr impl this_impl = impl::operate_matrix_v2;
static constexpr id belonging_id = id::app_operate_matrix;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,unsigned,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::operate_matrix_v2_app_allocate_matrix_0,call::operate_matrix_v2_app_pack_matrix_1,call::operate_matrix_v2_app_operate_matrix_2,call::operate_matrix_v2_app_unpack_matrix_3,call::operate_matrix_v2_app_deallocate_matrix_4>;
};template <> struct traits<impl::foo_rectangle> {static constexpr impl this_impl = impl::foo_rectangle;
static constexpr id belonging_id = id::foo_rectangle_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_rectangle_foo_rectangle_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_rectangle> {static constexpr impl this_impl = impl::caller_rectangle;
static constexpr id belonging_id = id::caller_rectangle;
using arg_tuple_type = util::tuple_t<int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_rectangle_foo_rectangle_app_0>;
};template <> struct traits<impl::foo_blocks> {static constexpr impl this_impl = impl::foo_blocks;
static constexpr id belonging_id = id::foo_1d_blocks_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_blocks_foo_1d_blocks_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_blocks> {static constexpr impl this_impl = impl::caller_blocks;
static constexpr id belonging_id = id::caller_blocks;
using arg_tuple_type = util::tuple_t<int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_blocks_foo_1d_blocks_app_0>;
};template <> struct traits<impl::foo_low_triangle> {static constexpr impl this_impl = impl::foo_low_triangle;
static constexpr id belonging_id = id::foo_low_tri_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_low_triangle_foo_low_tri_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_low_triangle> {static constexpr impl this_impl = impl::caller_low_triangle;
static constexpr id belonging_id = id::caller_low_triangle;
using arg_tuple_type = util::tuple_t<int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_low_triangle_foo_low_tri_app_0>;
};template <> struct traits<impl::foo_up_triangle> {static constexpr impl this_impl = impl::foo_up_triangle;
static constexpr id belonging_id = id::foo_up_tri_app;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<std::add_const_t<float>>,int,int>;
using call_sequence = util::sequence::enum_t<call,call::caller_up_triangle_foo_up_tri_app_0>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::caller_up_triangle> {static constexpr impl this_impl = impl::caller_up_triangle;
static constexpr id belonging_id = id::caller_up_triangle;
using arg_tuple_type = util::tuple_t<int,int>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::caller_up_triangle_foo_up_tri_app_0>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_allocate_0> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_allocate_0;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_allocate_1> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_allocate_1;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_allocate_2> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_allocate_2;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_pack_3> {static constexpr call this_call = call::mat_product_v3_block_compact_app_pack_3;
static constexpr impl belonging_impl = impl::pack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,dep::guard::bnd::readable<data::view<2,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_pack_4> {static constexpr call this_call = call::mat_product_v3_block_compact_app_pack_4;
static constexpr impl belonging_impl = impl::pack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,dep::guard::bnd::readable<data::view<2,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_pack_5> {static constexpr call this_call = call::mat_product_v3_block_compact_app_pack_5;
static constexpr impl belonging_impl = impl::pack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,dep::guard::bnd::readable<data::view<2,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_mat_product_app_6> {static constexpr call this_call = call::mat_product_v3_block_compact_mat_product_app_6;
static constexpr impl belonging_impl = impl::mat_product_v0_kernel_compact;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,dep::guard::bnd::readable<const float>,dep::guard::bnd::readable<const float>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_unpack_7> {static constexpr call this_call = call::mat_product_v3_block_compact_app_unpack_7;
static constexpr impl belonging_impl = impl::unpack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<2,float>>,dep::guard::bnd::readable<const float>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_deallocate_8> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_deallocate_8;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_deallocate_9> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_deallocate_9;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_deallocate_10> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_deallocate_10;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>>;
};template <> struct traits<call::mat_product_v2_block_strided_mat_product_app_0> {static constexpr call this_call = call::mat_product_v2_block_strided_mat_product_app_0;
static constexpr impl belonging_impl = impl::mat_product_v1_kernel_strided;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<2,float>>,dep::guard::bnd::readable<data::view<2,const float>>,dep::guard::bnd::readable<data::view<2,const float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_vec_v2_mat_vec_app_0> {static constexpr call this_call = call::mat_vec_v2_mat_vec_app_0;
static constexpr impl belonging_impl = impl::mat_vec_v1;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<1,float>>,dep::guard::bnd::readable<data::view<2,const float>>,dep::guard::bnd::readable<data::view<1,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::caller1_foo_fooapp_wo_0> {static constexpr call this_call = call::caller1_foo_fooapp_wo_0;
static constexpr impl belonging_impl = impl::foo;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<2,float>>,const unsigned,const unsigned,const unsigned>;
};template <> struct traits<call::caller2_foo_fooapp_wo_0> {static constexpr call this_call = call::caller2_foo_fooapp_wo_0;
static constexpr impl belonging_impl = impl::foo;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<2,float>>,const unsigned,const unsigned,const unsigned>;
};template <> struct traits<call::caller3_foo_fooapp_wo_0> {static constexpr call this_call = call::caller3_foo_fooapp_wo_0;
static constexpr impl belonging_impl = impl::foo;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<2,float>>,const unsigned,const unsigned>;
};template <> struct traits<call::pack_matrix_caller_matrix_allocate_0> {static constexpr call this_call = call::pack_matrix_caller_matrix_allocate_0;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,unsigned,unsigned>;
};template <> struct traits<call::pack_matrix_caller_matrix_pack_1> {static constexpr call this_call = call::pack_matrix_caller_matrix_pack_1;
static constexpr impl belonging_impl = impl::pack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,dep::guard::bnd::readable<data::view<2,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::pack_matrix_caller_matrix_deallocate_2> {static constexpr call this_call = call::pack_matrix_caller_matrix_deallocate_2;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>>;
};template <> struct traits<call::operate_matrix_v2_app_allocate_matrix_0> {static constexpr call this_call = call::operate_matrix_v2_app_allocate_matrix_0;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,unsigned,unsigned>;
};template <> struct traits<call::operate_matrix_v2_app_pack_matrix_1> {static constexpr call this_call = call::operate_matrix_v2_app_pack_matrix_1;
static constexpr impl belonging_impl = impl::pack_copy_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,dep::guard::bnd::readable<data::view<2,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::operate_matrix_v2_app_operate_matrix_2> {static constexpr call this_call = call::operate_matrix_v2_app_operate_matrix_2;
static constexpr impl belonging_impl = impl::operate_matrix_v1;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>,unsigned,unsigned>;
};template <> struct traits<call::operate_matrix_v2_app_unpack_matrix_3> {static constexpr call this_call = call::operate_matrix_v2_app_unpack_matrix_3;
static constexpr impl belonging_impl = impl::unpack_copy_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<data::view<2,float>>,dep::guard::bnd::readable<const float>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::operate_matrix_v2_app_deallocate_matrix_4> {static constexpr call this_call = call::operate_matrix_v2_app_deallocate_matrix_4;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float>>;
};template <> struct traits<call::caller_rectangle_foo_rectangle_app_0> {static constexpr call this_call = call::caller_rectangle_foo_rectangle_app_0;
static constexpr impl belonging_impl = impl::foo_rectangle;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<2,const float>>,int,int>;
};template <> struct traits<call::caller_blocks_foo_1d_blocks_app_0> {static constexpr call this_call = call::caller_blocks_foo_1d_blocks_app_0;
static constexpr impl belonging_impl = impl::foo_blocks;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<2,const float>>,int,int>;
};template <> struct traits<call::caller_low_triangle_foo_low_tri_app_0> {static constexpr call this_call = call::caller_low_triangle_foo_low_tri_app_0;
static constexpr impl belonging_impl = impl::foo_low_triangle;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<2,const float>>,int,int>;
};template <> struct traits<call::caller_up_triangle_foo_up_tri_app_0> {static constexpr call this_call = call::caller_up_triangle_foo_up_tri_app_0;
static constexpr impl belonging_impl = impl::foo_up_triangle;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::readable<data::view<2,const float>>,int,int>;
};}