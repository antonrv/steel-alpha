//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Graph;
export import App.Enum;
import Plat.Enum;
import SteelRT.Util.Sequence;
import SteelRT.Util.Types;
import SteelRT.Util.Tuple;
import SteelRT.Util.FwDeclarations.App;
import SteelRT.Dep.Guard.Backend;
import SteelRT.Dep.Dim.View;
export
namespace app{
template <> struct traits<id::app_pack>{using impl_sequence = util::sequence::enum_t<impl,impl::pack_matrix>;};template <> struct traits<id::app_unpack>{using impl_sequence = util::sequence::enum_t<impl,impl::unpack_matrix>;};template <> struct traits<id::mat_product_app>{using impl_sequence = util::sequence::enum_t<impl,impl::mat_product_v0_kernel_compact,impl::mat_product_v3_block_compact>;};template <> struct traits<id::matrix_allocate>{using impl_sequence = util::sequence::enum_t<impl,impl::allocate_matrix>;};template <> struct traits<id::matrix_deallocate>{using impl_sequence = util::sequence::enum_t<impl,impl::deallocate_matrix>;};template <> struct traits<impl::allocate_matrix> {static constexpr impl this_impl = impl::allocate_matrix;
static constexpr id belonging_id = id::matrix_allocate;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_allocate_0,call::mat_product_v3_block_compact_matrix_allocate_1,call::mat_product_v3_block_compact_matrix_allocate_2>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::deallocate_matrix> {static constexpr impl this_impl = impl::deallocate_matrix;
static constexpr id belonging_id = id::matrix_deallocate;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_deallocate_8,call::mat_product_v3_block_compact_matrix_deallocate_9,call::mat_product_v3_block_compact_matrix_deallocate_10>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::mat_product_v0_kernel_compact> {static constexpr impl this_impl = impl::mat_product_v0_kernel_compact;
static constexpr id belonging_id = id::mat_product_app;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_mat_product_app_6>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::pack_matrix> {static constexpr impl this_impl = impl::pack_matrix;
static constexpr id belonging_id = id::app_pack;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_app_pack_3,call::mat_product_v3_block_compact_app_pack_4,call::mat_product_v3_block_compact_app_pack_5>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::unpack_matrix> {static constexpr impl this_impl = impl::unpack_matrix;
static constexpr id belonging_id = id::app_unpack;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_app_unpack_7>;
using dispatch_sequence = util::sequence::enum_t<call>;
};template <> struct traits<impl::mat_product_v3_block_compact> {static constexpr impl this_impl = impl::mat_product_v3_block_compact;
static constexpr id belonging_id = id::mat_product_app;
static constexpr plat::arch arch_value = plat::arch::x86_64;
using arg_tuple_type = util::tuple_t<std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned>;
using call_sequence = util::sequence::enum_t<call>;
using dispatch_sequence = util::sequence::enum_t<call,call::mat_product_v3_block_compact_matrix_allocate_0,call::mat_product_v3_block_compact_matrix_allocate_1,call::mat_product_v3_block_compact_matrix_allocate_2,call::mat_product_v3_block_compact_app_pack_3,call::mat_product_v3_block_compact_app_pack_4,call::mat_product_v3_block_compact_app_pack_5,call::mat_product_v3_block_compact_mat_product_app_6,call::mat_product_v3_block_compact_app_unpack_7,call::mat_product_v3_block_compact_matrix_deallocate_8,call::mat_product_v3_block_compact_matrix_deallocate_9,call::mat_product_v3_block_compact_matrix_deallocate_10>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_allocate_0> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_allocate_0;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_allocate_1> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_allocate_1;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_allocate_2> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_allocate_2;
static constexpr impl belonging_impl = impl::allocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_pack_3> {static constexpr call this_call = call::mat_product_v3_block_compact_app_pack_3;
static constexpr impl belonging_impl = impl::pack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>,dep::guard::bnd::readable<dep::dim::view<2,float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_pack_4> {static constexpr call this_call = call::mat_product_v3_block_compact_app_pack_4;
static constexpr impl belonging_impl = impl::pack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>,dep::guard::bnd::readable<dep::dim::view<2,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_pack_5> {static constexpr call this_call = call::mat_product_v3_block_compact_app_pack_5;
static constexpr impl belonging_impl = impl::pack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>,dep::guard::bnd::readable<dep::dim::view<2,const float>>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_mat_product_app_6> {static constexpr call this_call = call::mat_product_v3_block_compact_mat_product_app_6;
static constexpr impl belonging_impl = impl::mat_product_v0_kernel_compact;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>,dep::guard::bnd::readable<float*>,dep::guard::bnd::readable<float*>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_app_unpack_7> {static constexpr call this_call = call::mat_product_v3_block_compact_app_unpack_7;
static constexpr impl belonging_impl = impl::unpack_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<dep::dim::view<2,float>>,dep::guard::bnd::readable<float*>,unsigned,unsigned,unsigned>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_deallocate_8> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_deallocate_8;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_deallocate_9> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_deallocate_9;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>>;
};template <> struct traits<call::mat_product_v3_block_compact_matrix_deallocate_10> {static constexpr call this_call = call::mat_product_v3_block_compact_matrix_deallocate_10;
static constexpr impl belonging_impl = impl::deallocate_matrix;
using arg_tuple_type = util::tuple_t<dep::guard::bnd::writable<float*>>;
};}