//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Proxy;
export import App.Graph;
export import SteelRT.Util.Types;
export import SteelRT.Util.Sequence;
export import SteelRT.Util.FwDeclarations.App;
export import SteelRT.Util.Predicates.App;
export import SteelRT.Task.Descriptor;
export import SteelRT.Task.Dispatcher;
export import SteelRT.Work.Descriptor.Global;
export import SteelRT.Dep.MakeAsync;
export import SteelRT.Dep.Guard.Backend;
export import SteelRT.Dep.Guard.Frontend;
export import SteelRT.Dep.Wrap;
export import <type_traits>;
export import <stdexcept>;
void allocate_matrix(std::add_pointer_t<float>,unsigned,unsigned);
void deallocate_matrix(std::add_pointer_t<float>);
void mat_product_v0_kernel_compact(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned);
void pack_matrix(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned);
void unpack_matrix(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned);
task::coro::dispatcher<app::impl::mat_product_v3_block_compact> mat_product_v3_block_compact(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned);
void mat_product_v1_kernel_strided(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned);
task::coro::dispatcher<app::impl::mat_product_v2_block_strided> mat_product_v2_block_strided(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned,unsigned);
void mat_vec_v1(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned);
task::coro::dispatcher<app::impl::mat_vec_v2> mat_vec_v2(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned);
void foo(std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::caller1_foo> caller1_foo(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::caller2_foo> caller2_foo(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
task::coro::dispatcher<app::impl::caller3_foo> caller3_foo(task::attr::descriptor& ,std::add_pointer_t<float>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>,std::add_const_t<unsigned>);
void pack_matrix(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned);
void allocate_matrix(std::add_pointer_t<float>,unsigned,unsigned);
void deallocate_matrix(std::add_pointer_t<float>);
task::coro::dispatcher<app::impl::pack_matrix_caller> pack_matrix_caller(task::attr::descriptor& ,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned,unsigned);
void allocate_matrix(std::add_pointer_t<float>,unsigned,unsigned);
void deallocate_matrix(std::add_pointer_t<float>);
void pack_copy_matrix(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned);
void unpack_copy_matrix(std::add_pointer_t<float>,std::add_pointer_t<std::add_const_t<float>>,unsigned,unsigned,unsigned);
void operate_matrix_v1(std::add_pointer_t<float>,unsigned,unsigned);
task::coro::dispatcher<app::impl::operate_matrix_v2> operate_matrix_v2(task::attr::descriptor& ,std::add_pointer_t<float>,unsigned,unsigned,unsigned,unsigned);
void foo_rectangle(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_rectangle> caller_rectangle(task::attr::descriptor& ,int,int);
void foo_blocks(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_blocks> caller_blocks(task::attr::descriptor& ,int,int);
void foo_low_triangle(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_low_triangle> caller_low_triangle(task::attr::descriptor& ,int,int);
void foo_up_triangle(std::add_pointer_t<std::add_const_t<float>>,int,int);
task::coro::dispatcher<app::impl::caller_up_triangle> caller_up_triangle(task::attr::descriptor& ,int,int);
export
namespace app{
template <>
class kernel_proxy<impl::allocate_matrix> {
  static constexpr impl this_impl = impl::allocate_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    allocate_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::deallocate_matrix> {
  static constexpr impl this_impl = impl::deallocate_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    deallocate_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::mat_product_v0_kernel_compact> {
  static constexpr impl this_impl = impl::mat_product_v0_kernel_compact;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    mat_product_v0_kernel_compact( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::pack_matrix> {
  static constexpr impl this_impl = impl::pack_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    pack_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::unpack_matrix> {
  static constexpr impl this_impl = impl::unpack_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    unpack_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::mat_product_v3_block_compact> {
public:
  static constexpr impl this_impl = impl::mat_product_v3_block_compact;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( mat_product_v3_block_compact( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::mat_product_v1_kernel_strided> {
  static constexpr impl this_impl = impl::mat_product_v1_kernel_strided;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    mat_product_v1_kernel_strided( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::mat_product_v2_block_strided> {
public:
  static constexpr impl this_impl = impl::mat_product_v2_block_strided;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( mat_product_v2_block_strided( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::mat_vec_v1> {
  static constexpr impl this_impl = impl::mat_vec_v1;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    mat_vec_v1( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::mat_vec_v2> {
public:
  static constexpr impl this_impl = impl::mat_vec_v2;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( mat_vec_v2( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo> {
  static constexpr impl this_impl = impl::foo;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller1_foo> {
public:
  static constexpr impl this_impl = impl::caller1_foo;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller1_foo( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class dispatcher_proxy<impl::caller2_foo> {
public:
  static constexpr impl this_impl = impl::caller2_foo;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller2_foo( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class dispatcher_proxy<impl::caller3_foo> {
public:
  static constexpr impl this_impl = impl::caller3_foo;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller3_foo( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::pack_matrix> {
  static constexpr impl this_impl = impl::pack_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    pack_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::allocate_matrix> {
  static constexpr impl this_impl = impl::allocate_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    allocate_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::deallocate_matrix> {
  static constexpr impl this_impl = impl::deallocate_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    deallocate_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::pack_matrix_caller> {
public:
  static constexpr impl this_impl = impl::pack_matrix_caller;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( pack_matrix_caller( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::allocate_matrix> {
  static constexpr impl this_impl = impl::allocate_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    allocate_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::deallocate_matrix> {
  static constexpr impl this_impl = impl::deallocate_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    deallocate_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::pack_copy_matrix> {
  static constexpr impl this_impl = impl::pack_copy_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    pack_copy_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::unpack_copy_matrix> {
  static constexpr impl this_impl = impl::unpack_copy_matrix;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    unpack_copy_matrix( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class kernel_proxy<impl::operate_matrix_v1> {
  static constexpr impl this_impl = impl::operate_matrix_v1;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    operate_matrix_v1( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::operate_matrix_v2> {
public:
  static constexpr impl this_impl = impl::operate_matrix_v2;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( operate_matrix_v2( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_rectangle> {
  static constexpr impl this_impl = impl::foo_rectangle;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_rectangle( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_rectangle> {
public:
  static constexpr impl this_impl = impl::caller_rectangle;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_rectangle( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_blocks> {
  static constexpr impl this_impl = impl::foo_blocks;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_blocks( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_blocks> {
public:
  static constexpr impl this_impl = impl::caller_blocks;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_blocks( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_low_triangle> {
  static constexpr impl this_impl = impl::foo_low_triangle;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_low_triangle( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_low_triangle> {
public:
  static constexpr impl this_impl = impl::caller_low_triangle;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_low_triangle( std::forward<DispatcherArgs>(args) ... ) );
  }
};
template <>
class kernel_proxy<impl::foo_up_triangle> {
  static constexpr impl this_impl = impl::foo_up_triangle;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
public:
  template <typename... KernelArgs>
  static void run(KernelArgs&&... args) {
    foo_up_triangle( std::forward<KernelArgs>(args) ... );
  }
};
template <>
class dispatcher_proxy<impl::caller_up_triangle> {
public:
  static constexpr impl this_impl = impl::caller_up_triangle;
  using arg_tuple_type = typename app::traits<this_impl>::arg_tuple_type;
  template <typename... DispatcherArgs>
  static
  std::shared_ptr<task::coro::dispatcher<this_impl>>
  create(DispatcherArgs&&... args) noexcept {
    return std::make_shared< task::coro::dispatcher<this_impl> >( caller_up_triangle( std::forward<DispatcherArgs>(args) ... ) );
  }
};
}