//////////////////////////////////////
// 
// Autogenerated file. Do not modify. 
// 
//////////////////////////////////////

export module App.Enum;
import SteelRT.Util.Types;
import SteelRT.Util.Values;
import SteelRT.Util.Sequence;
import SteelRT.Instrument.FwDeclarations;
import <cstdio>;
export
namespace app{enum class call : enum_uint_t {caller1_foo_fooapp_3d_0 = 2,caller2_foo_fooapp_3d_0 = 3,caller3_foo_fooapp_3d_0 = 4,caller4_foo_fooapp_3d_0 = 5,caller_block_foo_block_app_0 = 6};using enabled_calls = util::sequence::enum_t<call,call::caller1_foo_fooapp_3d_0,call::caller2_foo_fooapp_3d_0,call::caller3_foo_fooapp_3d_0,call::caller4_foo_fooapp_3d_0,call::caller_block_foo_block_app_0>;}
export
namespace instrument::event{template <> struct type<app::call>{static constexpr const char * name = "call";
static constexpr const enum_type_id_t type_id = 0;
static constexpr bool instrumentable = true;
};template <> struct value<app::call::caller1_foo_fooapp_3d_0>{static constexpr const char * name = "caller1_foo_fooapp_3d_0";}
;template <> struct value<app::call::caller2_foo_fooapp_3d_0>{static constexpr const char * name = "caller2_foo_fooapp_3d_0";}
;template <> struct value<app::call::caller3_foo_fooapp_3d_0>{static constexpr const char * name = "caller3_foo_fooapp_3d_0";}
;template <> struct value<app::call::caller4_foo_fooapp_3d_0>{static constexpr const char * name = "caller4_foo_fooapp_3d_0";}
;template <> struct value<app::call::caller_block_foo_block_app_0>{static constexpr const char * name = "caller_block_foo_block_app_0";}
;}export
namespace app{enum class id : enum_uint_t {caller1_foo = 2,caller2_foo = 3,caller3_foo = 4,caller4_foo = 5,caller_block = 6,foo_block_app = 7,fooapp_3d = 8};using enabled_ids = util::sequence::enum_t<id,id::caller1_foo,id::caller2_foo,id::caller3_foo,id::caller4_foo,id::caller_block,id::foo_block_app,id::fooapp_3d>;}
export
namespace instrument::event{template <> struct type<app::id>{static constexpr const char * name = "id";
static constexpr const enum_type_id_t type_id = 1;
static constexpr bool instrumentable = true;
};template <> struct value<app::id::caller1_foo>{static constexpr const char * name = "caller1_foo";}
;template <> struct value<app::id::caller2_foo>{static constexpr const char * name = "caller2_foo";}
;template <> struct value<app::id::caller3_foo>{static constexpr const char * name = "caller3_foo";}
;template <> struct value<app::id::caller4_foo>{static constexpr const char * name = "caller4_foo";}
;template <> struct value<app::id::caller_block>{static constexpr const char * name = "caller_block";}
;template <> struct value<app::id::foo_block_app>{static constexpr const char * name = "foo_block_app";}
;template <> struct value<app::id::fooapp_3d>{static constexpr const char * name = "fooapp_3d";}
;}export
namespace app{enum class impl : enum_uint_t {caller1_foo = 2,caller2_foo = 3,caller3_foo = 4,caller4_foo = 5,caller_block = 6,foo = 7,foo_block = 8};using enabled_impls = util::sequence::enum_t<impl,impl::caller1_foo,impl::caller2_foo,impl::caller3_foo,impl::caller4_foo,impl::caller_block,impl::foo,impl::foo_block>;}
export
namespace instrument::event{template <> struct type<app::impl>{static constexpr const char * name = "impl";
static constexpr const enum_type_id_t type_id = 2;
static constexpr bool instrumentable = true;
};template <> struct value<app::impl::caller1_foo>{static constexpr const char * name = "caller1_foo";}
;template <> struct value<app::impl::caller2_foo>{static constexpr const char * name = "caller2_foo";}
;template <> struct value<app::impl::caller3_foo>{static constexpr const char * name = "caller3_foo";}
;template <> struct value<app::impl::caller4_foo>{static constexpr const char * name = "caller4_foo";}
;template <> struct value<app::impl::caller_block>{static constexpr const char * name = "caller_block";}
;template <> struct value<app::impl::foo>{static constexpr const char * name = "foo";}
;template <> struct value<app::impl::foo_block>{static constexpr const char * name = "foo_block";}
;}